@using GGR.Shared.SaleTicket;
@using GGR.Client.Areas.SaleTickets.Services.Contracts;
@using System.Security.Claims;

@inject ISaleTicketClientService TicketClientService;
@inject SweetAlertService Sweet;
@inject AuthenticationStateProvider AuthStateProvider;


<Modal Open="@Open">
    <div class="d-flex mb-3" style="justify-content: end; cursor: pointer;" @onclick="CloseModal">
        <div style="width: 20px; height: 3px; background: #F47174; transform: translateX(20px) rotate(45deg); " class="rounded"></div>
        <div style="width: 20px; height: 3px; background: #F47174; transform: rotate(-45deg); " class="rounded"></div>
    </div>


    <EditForm Model="@registerRequest" OnValidSubmit="@HandleValidSubmit" style="max-width: 400px;">
        <DataAnnotationsValidator/>
        
        <img src="/TICKET.png" alt="Muestra de ticket" style="width: 100%;">

        <div class="d-flex flex-column mt-3" style="">
            <label for="folio" class="form-customer-label mb-2">Registra el folio de tu ticket</label>
            <InputText @bind-Value="registerRequest.Folio" class="form-control" />
        </div>

        <label for="folio" class="form-customer-label mt-2">Registra la hora de carga que se encuentra en el ticket</label>
        <div style="display: flex; align-items: center; gap: 6px;">
            <InputNumber @bind-Value="registerRequest.Hour" min="0" max="12" class="form-control" style="width: 74px" />
            <span style="font-size: 30px; font-weight: 600;">:</span>
            <InputNumber @bind-Value="registerRequest.Minutes" min="0" max="60" class="form-control" style="width: 74px" />
            
            <InputSelect class="form-select" style="width: 74px" @bind-Value="registerRequest.NoonOrMorning">
              <option value="AM">AM</option>
              <option value="PM">PM</option>
            </InputSelect>
        </div>

        <ValidationMessage For="@(() => registerRequest.Hour)"/>
        <ValidationMessage For="@(() => registerRequest.Minutes)"/>
        <ValidationMessage For="@(() => registerRequest.NoonOrMorning)"/>

        <button type="submit" class="px-2 py-1 border-0 rounded text-white mt-3" style="background-color: #333; bottom: 30px; right: 30px;">
            Registrar ticket
        </button>
    </EditForm>
</Modal>

@code {

    private string CustomerId { get; set; } = string.Empty;
    private RegisterTicketRequest registerRequest = new RegisterTicketRequest();

    [Parameter]
    public bool Open { get; set; }

    [Parameter]
    public EventCallback OnCloseModal { get; set; }

    private void CloseModal()
    {
        OnCloseModal.InvokeAsync();
    }

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var claims = authState.User.Claims;
        CustomerId = claims.First(claim => claim.Type == ClaimTypes.UserData).Value;
        registerRequest.UserId = CustomerId;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await TicketClientService.RegisterTicket(registerRequest);

            var toast = Sweet.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    TimerProgressBar = true,
                    Position = "top-end",
                    ShowConfirmButton = false,
                    Timer = 3000,
                });

            if ( response.Success )
            {
                CloseModal();
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "success",
                        Title = response.Message
                    });
            }
            else
            {
                CloseModal();
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "error",
                        Title = response.Message
                    });
            }
        }
        catch ( Exception ex )
        {
            await Sweet.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Text = "Algo ha salido mal, por favor intentelo de nuevo"
                });
        }
        CloseModal();
        registerRequest = new RegisterTicketRequest { UserId = CustomerId };
    }
}