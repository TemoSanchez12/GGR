@layout CustomerLayout
@using GGR.Client.Areas.Rewards.Models;
@using GGR.Client.Areas.Rewards.Utils;
@using GGR.Client.Areas.Rewards.Services.Contracts;
@using GGR.Client.Areas.Customer.Components;
@using GGR.Client.Areas.Users.Models;
@using GGR.Client.Areas.Users.Services.Contract;
@using GGR.Client.Areas.Users.Utils;
@using System.Security.Claims;
@using GGR.Shared.RewardClaim;
@using GGR.Client.Areas.RewardClaim.Services.Contracts;

@inject IRewardClaimClientService RewardClaimClientService;
@inject IRewardClientService RewardClientService;
@inject IUserClientService UserClientService;
@inject SweetAlertService Sweet;
@inject NavigationManager NavigationManager;
@inject ILogger<Index> Logger;
@inject AuthenticationStateProvider AuthStateProvider;

@attribute [Authorize(Roles = "Admin, Editor, Client")]
@attribute [Route(Routes.Customer.Index)]

<section class="" style="margin-top: 100px;">
    <div class="d-flex justify-content-between gap-4" style="align-items: center;">
        @if ( loadingUser )
        {
            <div style="display: flex; align-items: center; gap: 20px;">
                <div class="spinner-border" role="status">
                </div>
                <span class="sr-only">Cargando datos de usuarios...</span>
            </div>
        }
        else
        {
            <div class="mb-5">
              <h3>Bienvenido @User.Name</h3>

                <p class="h5" style="margin: 30px 0;">Tienes <span style="font-weight: bold;">@User.Points</span> acumulados</p>

              <button @onclick="ShowRegisterTicketModal" class="px-2 py-1 border-0 rounded text-white" style="background-color: #333;">
                  Registrar ticket
              </button>
            </div>

            <div style="width: 50%;">
              <img src="/catalogoderecompensas.jpg" alt="Gasolineras GGR" style="width: 100%;" />
            </div>
        }
    </div>

    
</section>



<RegisterTicketModal Open="@Open" OnCloseModal="@HideRegisterTicketModal" />


@code {
    private User User { get; set; } = new User();
    private string Id { get; set; } = string.Empty;

    private bool loadingRewards = false;
    private bool loadingUser = false;
    public bool Open = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var claims = authState.User.Claims;
        Id = claims.First(claim => claim.Type == ClaimTypes.UserData).Value;

        loadingRewards = true;
        loadingUser = true;
        await LoadUser();
        loadingRewards = false;
        loadingUser = false;
    }

    private async Task LoadUser()
    {
        var toast = Sweet.Mixin(new SweetAlertOptions
            {
                Toast = true,
                TimerProgressBar = true,
                Position = "top-end",
                ShowConfirmButton = false,
                Timer = 3000,
            });
        try
        {
            var response = await UserClientService.GetUserById(Id);

            if ( response.Success && response.Data != null )
            {
                User = UserMapper.MapToEntity(response.Data.User);
            }
            else
            {
                throw new Exception(response.Message);
            }

        }
        catch ( Exception ex )
        {
            Logger.LogError(ex, "Something went wrong fetching user data");
            NavigationManager.NavigateTo(Routes.Customer.LoginCustomerSessionExpired);
            await toast.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Title = "Algo ha salido mal, por favor intentelo de nuevo"
                });
        }
    }

    private void HideRegisterTicketModal()
    {
        Open = false;
    }

    private void ShowRegisterTicketModal()
    {
        Open = true;
    }
}