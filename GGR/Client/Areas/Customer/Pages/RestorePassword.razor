@using GGR.Client.Areas.Users.Services.Contract;
@using GGR.Shared.User;
@using GGR.Client;
@using System.Web;

@layout CustomerLayout
@attribute [Route(Routes.Customer.RestorePassword)]

<div class="modal-form-container">
    <p class="modal-form-welcome">Restablecimiento de contraseña</p>

    <div>
        <p>GGR</p>
    </div>

    <EditForm class="form-customer" Model="@request" OnValidSubmit="@HandleValidSubmit" style="margin: 30px 0; width: 90%;">
        <DataAnnotationsValidator />


        <div class="form-customer-control">
            <label for="email" class="form-customer-label">Nueva contraseña</label>
            <InputText @bind-Value="request.NewPassword" class="form-control" style="width: 100%;" type="password" />
            <ValidationMessage For="@(() => request.NewPassword)" />
        </div>

        <div class="form-customer-control">
            <label for="password" class="form-customer-label">Confirmar nueva contraseña</label>
            <InputText @bind-Value="request.ConfirmPassword" type="password" class="form-control" />
            <ValidationMessage For="@(() => request.ConfirmPassword)" />
        </div>

        <button type="submit" class="form-customer-submit-button">Restablecer contraseña</button>
    </EditForm>

    @if ( sendingRequest )
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Restableciendo contraseña...</span>
        </div>
    }
</div>


@code {
    private ResetPasswordRequest request = new();
    private bool sendingRequest = false;

    [Parameter] public string Token { get; set; } = string.Empty;
    [Inject] private IUserClientService UserClientService { get; set; } = null!;
    [Inject] private SweetAlertService Sweet { get; set; } = null!;
    [Inject] private ILogger<LoginCustomer> Logger { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    protected override void OnInitialized()
    {
        request.ResetToken = Token;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            Logger.LogInformation("Sending login request for user {UserEmail}");
            sendingRequest = true;
            StateHasChanged();

            var response = await UserClientService.ResetPassword(request);

            sendingRequest = false;
            StateHasChanged();

            var toast = Sweet.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    TimerProgressBar = true,
                    Position = "top-end",
                    ShowConfirmButton = false,
                    Timer = 3000,
                });

            if ( response.Success )
            {
                NavigationManager.NavigateTo(Routes.Customer.Index);
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "success",
                        Title = response.Message
                    });
            }
            else
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "error",
                        Title = response.Message
                    });
        }
        catch ( Exception ex )
        {
            Logger.LogError("Something went wrong while sending login request: {ErrorMessage}", ex.Message);
            await Sweet.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Text = "Algo ha salido mal, por favor intentelo de nuevo"
                });
        }


    }
}
