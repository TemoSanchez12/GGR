@using GGR.Client.Areas.Users.Services.Contract;
@using GGR.Shared.User;
@using GGR.Client;
@using System.Web;

@layout CustomerLayout
@attribute [Route(Routes.Customer.ResetPasswordRequest)]


<div class="modal-form-container">
    <p class="modal-form-welcome">Recupear contraseña</p>

    <EditForm class="form-customer" Model="@request" OnValidSubmit="@HandleValidSubmit" style="margin: 30px 0; width: 90%;">
        <DataAnnotationsValidator />

        <p class="text-secondary">Al correo electronico que ingrese se enviara un enlace para que pueda restablecer su contraseña</p>

        <div class="form-customer-control">
            <label for="email" class="form-customer-label">Correo electronico</label>
            <InputText @bind-Value="request.Email" class="form-control" style="width: 100%;" />
            <ValidationMessage For="@(() => request.Email)" />
        </div>

        <button type="submit" class="form-customer-submit-button">Enviar</button>

        @if ( sendingEmail )
        {
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Enviando enlace...</span>
            </div>
        }
    </EditForm>

    <div class="form-customer-links">
        <a href="@Routes.Customer.LoginCustomer">Regresar a inicio de sesión</a>
    </div>
</div>

@code {
    private EmailToRetorePassRequest request = new();
    private bool sendingEmail = false;

    [Inject] private IUserClientService UserClientService { get; set; } = null!;
    [Inject] private SweetAlertService Sweet { get; set; } = null!;
    [Inject] private ILogger<LoginCustomer> Logger { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    private async Task HandleValidSubmit()
    {
        try
        {
            sendingEmail = true;
            StateHasChanged();

            var response = await UserClientService.EmailToRestorePass(request);

            sendingEmail = false;
            StateHasChanged();

            var toast = Sweet.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    TimerProgressBar = true,
                    Position = "top-end",
                    ShowConfirmButton = false,
                    Timer = 3000,
                });

            if ( response.Success )
            {
                NavigationManager.NavigateTo(Routes.Customer.LoginCustomer);
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "success",
                        Title = response.Message
                    });
            }
            else
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "error",
                        Title = response.Message
                    });

        }
        catch ( Exception ex )
        {
            Logger.LogError("Something went wrong while sending login request: {ErrorMessage}", ex.Message);
            await Sweet.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Text = "Algo ha salido mal, por favor intentelo de nuevo"
                });
        }
    }
}