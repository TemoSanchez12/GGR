@using GGR.Client.Areas.Users.Services.Contract;
@using GGR.Shared.User;
@using GGR.Client;
@using System.Web;

@layout CustomerLayout
@attribute [Route(Routes.Customer.LoginCustomer)]

<div class="modal-form-container">
    <div>
        <img
          style="width: 100%;" 
          alt="Grupo Gasolinero Rivas Acumulacion de puntos"
          src="/bienvenidabanner.jpg"/>
    </div>

    <EditForm class="form-customer" Model="@loginRequest" OnValidSubmit="@HandleValidSubmit" style="margin: 30px 0; width: 90%;">
        <DataAnnotationsValidator />


        <div class="form-customer-control">
            <label for="email" class="form-customer-label">Correo electronico</label>
            <InputText @bind-Value="loginRequest.Email" class="form-control" style="width: 100%;" />
            <ValidationMessage For="@(() => loginRequest.Email)" />
        </div>

        <div class="form-customer-control">
            <label for="password" class="form-customer-label">Contraseña</label>
            <InputText @bind-Value="loginRequest.Password" type="password" class="form-control" />
            <ValidationMessage For="@(() => loginRequest.Password)" />
        </div>

        <button type="submit" class="form-customer-submit-button">Iniciar sesión</button>

        @if ( sendingRequest )
        {
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Iniciando sesión...</span>
            </div>
        }
    </EditForm>

    <div class="form-customer-links">
        <a href="@Routes.Customer.ResetPasswordRequest">¿Olvidaste tu contraseña?</a>
        <a href="@Routes.Customer.RegisterCustomer">Registrarse</a>
    </div>
</div>


@code {
    private UserLoginRequest loginRequest = new();
    private bool sendingRequest = false;

    [Parameter] public string? SessionExpired { get; set; }
    [Inject] private IUserClientService UserClientService { get; set; } = null!;
    [Inject] private SweetAlertService Sweet { get; set; } = null!;
    [Inject] private ILogger<LoginCustomer> Logger { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await UserClientService.UserLogout();
        var sessionExpired = HttpUtility.ParseQueryString
            (new Uri(NavigationManager.Uri).Query)
        .Get("sessionExpired");

        if ( sessionExpired == "true" )
        {
            await Sweet.FireAsync(new SweetAlertOptions
                {
                    Icon = "info",
                    Title = "Su sesión ha expirado",
                    Text = "Por favor inicie sesión nuevamente"
                });
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            sendingRequest = true;
            StateHasChanged();

            Logger.LogInformation("Sending login request for user {UserEmail}", loginRequest.Email);
            var response = await UserClientService.UserLogin(loginRequest);

            sendingRequest = false;
            StateHasChanged();

            var toast = Sweet.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    TimerProgressBar = true,
                    Position = "top-end",
                    ShowConfirmButton = false,
                    Timer = 3000,
                });

            if ( response.Success )
            {
                NavigationManager.NavigateTo(Routes.Customer.Index);
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "success",
                        Title = response.Message
                    });
            }
            else
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "error",
                        Title = response.Message
                    });
        }
        catch ( Exception ex )
        {
            Logger.LogError("Something went wrong while sending login request: {ErrorMessage}", ex.Message);
            await Sweet.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Text = "Algo ha salido mal, por favor intentelo de nuevo"
                });
        }


    }
}
