@using GGR.Client.Areas.FileRecord.Services.Contracts;
@using GGR.Shared.FileRecord;
@using GGR.Client.Areas.FileRecord.Models;
@using GGR.Client.Areas.FileRecord.Utils;

@inject IFileRecordClientService FileRecordClientService;
@inject SweetAlertService Sweet;

@layout MainLayout
@attribute [Authorize(Roles = "Admin, Editor")]
@attribute [Route(Routes.FileRecord.ManageFileRecords)]


<h3>Administrar archivos de registros</h3>



<EditForm Model="@request" OnValidSubmit="@UploadFileHandler" style="width: min(95%, 600px);">
    <div class="mb-3">
        <label for="email" class="form-label">Fecha del archivo registro</label>
        <InputDate @bind-Value="request.DateForRecord" class="form-control" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Contraseña</label>
        <InputFile OnChange="OnInputFileChange" accept=".csv" class="form-control" />
    </div>

    <div class="d-flex gap-2" style="align-items: center;">

        <button class="btn btn-primary">
            Subir registro
        </button>

        @if ( uploadingFile )
        {
            <div style="display: flex; align-items: center; gap: 20px;">
                <div class="spinner-border" role="status">
                </div>
                <span class="sr-only">Subiendo archivo de registros...</span>
            </div>
        }
    </div>
</EditForm>

@if ( FileRecords.Any() )
{
    <h4 class="mt-5">Archivos de registros sin procesar</h4>

    <table class="table table-bordered mt-1">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Día del registro</th>
                <th scope="col">Fecha de carga</th>
                <th scope="col">Acciones</th>
            </tr>
        </thead>

        <tbody>

            @foreach ( var file in FileRecords )
            {
                <tr>
                    <td scope="row">@file.Id</td>
                    <td>@file.FileName</td>
                    <td>@file.UploadedOn.ToString()</td>
                    <td>
                        <button class="btn btn-primary" @onclick="@(async () => await ProcessFile(file.Id))">
                            Procesar
                        </button>
                        <button class="btn btn-danger btn-sm" onclick="@(async() => await DeleteFile(file.Id))">
                            <i class="oi oi-trash"></i>
                        </button>
                    </td>

                </tr>
            }
        </tbody>
    </table>
    @if ( processingFile )
    {
        <div style="display: flex; align-items: center; gap: 20px;">
            <div class="spinner-border" role="status">
            </div>
            <span class="sr-only">Procesando archivo de registros ...</span>
        </div>
    }
}
else
{
    <h4 class="mt-5 text-primary">Todos los archivos se encuentran procesados</h4>
}

@code {
    private bool uploadingFile = false;
    private bool processingFile = false;

    private List<FileRecord> FileRecords { get; set; } = new List<FileRecord>();
    private long maxFileSize = 1024 * 1024 * 128;
    private UploadFileRecordRequest request { get; set; } = new UploadFileRecordRequest();

    private async Task OnInputFileChange(InputFileChangeEventArgs arg)
    {
        using var content = new MultipartFormDataContent();
        var fileContent = new StreamContent(arg.File.OpenReadStream(maxFileSize));
        using var memoryStream = new MemoryStream();
        await fileContent.CopyToAsync(memoryStream);
        var base64content = Convert.ToBase64String(memoryStream.ToArray());

        request.FileContentBase64 = base64content;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadFileRecords();
    }

    private async Task DeleteFile(Guid fileId)
    {
        var result = await Sweet.FireAsync(new SweetAlertOptions
            {
                Title = "¿Esta seguro de que desea elimiar el registro?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si, eliminar",
                CancelButtonText = "No, conservar"
            });

        if ( result.IsConfirmed )
        {
            try
            {
                var request = new DeleteFileRecordRequest { FileRecordId = fileId };
                var response = await FileRecordClientService.RemoveFileRecord(request);

                if ( response.Success )
                {
                    await LoadFileRecords();
                    StateHasChanged();
                    await Sweet.FireAsync(new SweetAlertOptions
                        {
                            Title = "Eliminado",
                            Icon = SweetAlertIcon.Success,
                            Text = response.Message
                        });

                }
                else
                {
                    await Sweet.FireAsync(new SweetAlertOptions
                        {
                            Title = "Algo salio mal",
                            Icon = SweetAlertIcon.Error,
                            Text = response.Message
                        });
                }

            }
            catch ( Exception ex )
            {
                await Sweet.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Icon = SweetAlertIcon.Error,
                        Text = "Error al eliminar el registro"
                    });
            }
        }
    }

    private async Task LoadFileRecords()
    {
        var toast = Sweet.Mixin(new SweetAlertOptions
            {
                Toast = true,
                TimerProgressBar = true,
                Position = "top-end",
                ShowConfirmButton = false,
                Timer = 3000,
            });

        try
        {
            var response = await FileRecordClientService.GetFileRecordsWithoutProcessing();

            if ( response == null )
                throw new Exception("Respuesta nulla");

            if ( response.Data == null )
            {
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "error",
                        Title = response.Message
                    });
            }
            else
            {
                FileRecords = response.Data!.FileRecords
                    .Select(file => FileRecordMapper.MapToEntity(file)).ToList();

            }
        }
        catch ( Exception ex )
        {
            await toast.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Title = ex.Message
                });
        }
    }

    private async Task UploadFileHandler()
    {
        uploadingFile = true;
        var toast = Sweet.Mixin(new SweetAlertOptions
            {
                Toast = true,
                TimerProgressBar = true,
                Position = "top-end",
                ShowConfirmButton = false,
                Timer = 3000,
            });

        try
        {
            var response = await FileRecordClientService.UploadFileRecord(request);
            uploadingFile = false;

            StateHasChanged();
            if ( response == null )
                throw new Exception("Respuesta nulla");


            if ( response.Data == null )
            {
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "error",
                        Title = response.Message
                    });
            }
            else
            {
                await LoadFileRecords();
                StateHasChanged();
                request = new UploadFileRecordRequest();
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "success",
                        Title = response.Message
                    });
            }
        }
        catch ( Exception ex )
        {
            await toast.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Title = ex.Message
                });
        }
    }

    private async Task ProcessFile(Guid fileRecordId)
    {
        processingFile = true;
        var toast = Sweet.Mixin(new SweetAlertOptions
            {
                Toast = true,
                TimerProgressBar = true,
                Position = "top-end",
                ShowConfirmButton = false,
                Timer = 3000,
            });

        try
        {
            var processRequest = new ProcessingFileRecordRequest { FileRecordId = fileRecordId };
            var response = await FileRecordClientService.ProcessFileRecord(processRequest);

            if ( response == null )
                throw new Exception("Respuesta nulla");

            processingFile = false;

            StateHasChanged();

            if ( response.Data == null )
            {
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "error",
                        Title = response.Message
                    });
            }
            else
            {
                await LoadFileRecords();
                StateHasChanged();
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "success",
                        Title = response.Message
                    });
            }
        }
        catch ( Exception ex )
        {
            await toast.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Title = ex.Message
                });
        }

    }
}
