@layout MainLayout
@using GGR.Client.Areas.Rewards.Services.Contracts;
@using GGR.Shared.Reward;
@using GGR.Client.Areas.Rewards.Utils;

@attribute [Authorize(Roles = "Admin")]
@attribute [Route(Routes.Reward.EditReward)]

<h3>Editar recompenza</h3>

<EditForm Model="@_reward" OnValidSubmit="@OnValidSubmitHandler" class="border border-light container-sm p-5 rounded">
    <DataAnnotationsValidator />

    <div class="form-group mb-3">
        <label class="form-label">Nombre</label>
        <InputText class="form-control" @bind-Value="_reward.Name" />
        <ValidationMessage For="@(()=> _reward.Name)" />
    </div>

    <div class="form-group mb-3">
        <label class="form-label">Descripción</label>
        <InputTextArea class="form-control" @bind-Value="_reward.Description" />
        <ValidationMessage For="@(()=> _reward.Name)" />
    </div>

    <div class="form-group mb-3">
        <label class="form-label">Imagen de producto</label>
        <InputFile class="form-control" accept="image/jpg" OnChange="OnInputFileChange" />
        <p class="text-info">Si no quiere actualizar la imagen deje este campo vacio</p>
    </div>

    <div class="form-group mb-3">
        <label class="form-label">Puntos requeridos</label>
        <InputNumber class="form-control" @bind-Value="_reward.PricePoints" />
        <ValidationMessage For="@(()=> _reward.PricePoints)" />
    </div>

    <div class="form-group mb-3">
        <label class="form-label">Unidades disponibles</label>
        <InputNumber class="form-control" @bind-Value="_reward.UnitsAvailable" />
        <ValidationMessage For="@(()=> _reward.UnitsAvailable)" />
    </div>

    <div class="form-group mb-3">
        <label class="form-label">Esta activa</label>
        <InputSelect class="form-select" @bind-Value="_reward.IsActive">
            <option value="True">Si</option>
            <option value="False">No</option>
        </InputSelect>
        <ValidationMessage For="@(()=> _reward.IsActive)" />
    </div>

    <div class="">
        <button type="submit" class="btn btn-success btn-lg">Editar</button>
    </div>
</EditForm>


@code {

    private UpdateRewardRequest _reward = new UpdateRewardRequest();
    private long maxFileSize = 1048576;

    [Parameter] public string Id { get; set; } = string.Empty;

    [Inject] private IRewardClientService RewardClientService { get; set; } = null!;
    [Inject] private SweetAlertService Sweet { get; set; } = null!;
    [Inject] private ILogger<CreateReward> Logger { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    private async Task OnInputFileChange(InputFileChangeEventArgs args)
    {
        using var content = new MultipartFormDataContent();
        var fileContent = new StreamContent(args.File.OpenReadStream(maxFileSize));
        using var memoryStream = new MemoryStream();
        await fileContent.CopyToAsync(memoryStream);
        var base64content = Convert.ToBase64String(memoryStream.ToArray());
        _reward.Base64Photo = base64content;
        _reward.ExtentionFile = args.File.ContentType;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await RewardClientService.GetReward(Id);

            if ( response.Success && response.Data != null )
            {
                var reward = RewardMapper.MapToEntity(response.Data.Reward);
                _reward.RewardId = reward.Id.ToString();
                _reward.Name = reward.Name;
                _reward.Description = reward.Description;
                _reward.PricePoints = reward.PricePoints;
                _reward.UnitsAvailable = reward.UnitsAvailable;
                _reward.IsActive = reward.Status == Models.RewardStatus.Available
                    ? true : false;
            }
        }
        catch ( Exception ex )
        {
            Logger.LogError("Something went wrong while fetching reward {ErrorMessage}", ex.Message);
            NavigationManager.NavigateTo(Routes.Reward.RewardsList);
            await Sweet.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Text = "Algo ha salido mal, por favor intentelo de nuevo"
                });
        }
    }

    private async Task OnValidSubmitHandler()
    {
        try
        {
            Logger.LogInformation("Sending request to create reward {RewardName}", _reward.Name);
            var response = await RewardClientService.UpdateReward(_reward);

            var toast = Sweet.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    TimerProgressBar = true,
                    Position = "top-end",
                    ShowConfirmButton = false,
                    Timer = 3000,
                });

            if ( response.Success )
            {
                NavigationManager.NavigateTo(Routes.Reward.RewardsList);
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "success",
                        Title = response.Message
                    });
            }
            else
            {
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "error",
                        Title = response.Message
                    });
            }
        }
        catch ( Exception ex )
        {
            Logger.LogError("Something went wrong while trying to create reward {ErrorMessage}", ex.Message);
            await Sweet.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Text = "Algo ha salido mal, por favor intentelo de nuevo"
                });
        }
    }
}