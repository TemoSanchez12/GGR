@using GGR.Client.Areas.RewardClaim.Models;
@using GGR.Client.Areas.RewardClaim.Services.Contracts;
@using GGR.Shared.RewardClaim;
@using GGR.Client.Areas.RewardClaim.Utils;
@layout MainLayout
@attribute [Authorize(Roles = "Editor, Admin")]
@attribute [Route(Routes.RewardClaim.RewardClaimList)]

<EditForm Model="@filter" class="border border-light container-sm p-5 rounded" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />

    <div class="form-group mb-3">
        <label class="form-label">Busca reclamos de recompensa por email</label>
        <InputText class="form-control" @bind-Value="filter.Email" />
        <ValidationMessage For="@(()=> filter.Email)" />
    </div>

    <button type="submit" class="btn btn-primary">Buscar</button>
</EditForm>


@if ( RewardClaims.Any() )
{
    <table class="table table-bordered">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Email de usuario</th>
                <th scope="col">Nombre de recompensa</th>
                <th scope="col">Estado</th>
                <th scope="col">Reclamo creado</th>
                <th scope="col">Acciones</th>
            </tr>
        </thead>

        <tbody>

            @foreach ( var rewardClaim in RewardClaims )
            {
                <tr>
                    <td scope="row">@rewardClaim.UserEmail</td>
                    <td>@rewardClaim.Reward.Name</td>
                    <td>@rewardClaim.RewardClaimStatus</td>
                    <td>@rewardClaim.ClaimCreated</td>

                    <td>
                        @if ( rewardClaim.RewardClaimStatus != GGR.Client.Areas.RewardClaim.Models.RewardClaimStatus.Claimed )
                        {
                            <button class="btn btn-primary btn-sm border-0" @onclick="(async () => await HandleClaimReward(rewardClaim.Id.ToString(), rewardClaim.UserEmail))">
                                Cambiar estado a reclamada
                            </button>
                        }
                        else
                        {
                            <p>Acción no disponible</p>
                        }
                    </td>

                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="text-center mt-5">Aún no hay reclamos de recompenza</p>
}


@code {
    private List<RewardClaim> RewardClaims = new List<RewardClaim>();
    public RewardClaimsFilter filter = new RewardClaimsFilter();

    [Inject] private IRewardClaimClientService RewardClaimClientService { get; set; } = null!;
    [Inject] private SweetAlertService Sweet { get; set; } = null!;
    [Inject] private ILogger<RewardClaimsList> Logger { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    private async Task HandleSubmit()
    {
        await LoadRewardClaims(filter.Email);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRewardClaims(null);
    }

    private async Task HandleClaimReward(string rewardClaimId, string userEmail)
    {
        var toast = Sweet.Mixin(new SweetAlertOptions
            {
                Toast = true,
                TimerProgressBar = true,
                Position = "top-end",
                ShowConfirmButton = false,
                Timer = 3000,
            });

        try
        {
            var request = new UpdateRewardClaimStatusRequest
                {
                    RewardClaimId = rewardClaimId,
                    NewStatus = GGR.Shared.RewardClaim.Definitions.RewardClaimStatusDefinition.Claimed,
                    UserEmail = userEmail
                };

            var response = await RewardClaimClientService.UpdateRewardClaimStatus(request);

            if ( response.Data == null )
            {
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "error",
                        Title = response.Message
                    });
            }
            else
            {
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "success",
                        Title = response.Message
                    });
            }
        }
        catch ( Exception ex )
        {
            Logger.LogError("Something went wrong claiming reward {ErrorMessage}", ex.Message);
            await toast.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Title = ex.Message
                });
        }
    }

    private async Task LoadRewardClaims(string? email)
    {
        var toast = Sweet.Mixin(new SweetAlertOptions
            {
                Toast = true,
                TimerProgressBar = true,
                Position = "top-end",
                ShowConfirmButton = false,
                Timer = 3000,
            });

        try
        {
            var response = new ServiceResponse<GetAllRewardClaimsResponse>();

            if ( email == null )
                response = await RewardClaimClientService.GetAllRewardClaims();
            else
                response = await RewardClaimClientService.GetRewardClaimsByEmail(email);


            if ( response.Data == null )
            {
                await toast.FireAsync(new SweetAlertOptions
                    {
                        Icon = "error",
                        Title = response.Message
                    });
            }
            else
            {
                RewardClaims = response.Data.RewardClaims.Select(rewardClaim => RewardClaimMapper.MapToEntity(rewardClaim)).ToList();
                StateHasChanged();

            }
        }
        catch ( Exception ex )
        {
            Logger.LogError("Something went wrong fetching reward clamis {ErrorMessage}", ex.Message);
            await toast.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Title = ex.Message
                });
        }

    }
}