@page "/users"
@layout MainLayout
@attribute [Authorize(Roles = "Editor, Admin")]
@using GGR.Client.Areas.Users.Models;
@using GGR.Client.Areas.Users.Services.Contract;
@using GGR.Client.Areas.Users.Utils;

<EditForm Model="@filter" OnValidSubmit="@HandleSubmitForm" class="border border-light container-sm p-5 rounded">
    <DataAnnotationsValidator />

    <div class="form-group mb-3">
        <label class="form-label">Busca reclamos de recompensa por email</label>
        <InputText class="form-control" @bind-Value="filter.Email" />
        <ValidationMessage For="@(()=> filter.Email)" />
    </div>

    <button type="submit" class="btn btn-primary">Buscar</button>
</EditForm>



@if ( Users.Any() )
{
    <table class="table table-bordered">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Nombre</th>
                <th scope="col">Email</th>
                <th scope="col">Telefono</th>
                <th scope="col">Puntos</th>
                <th scope="col">Acciones</th>
            </tr>
        </thead>

        <tbody>

            @foreach ( var user in Users )
            {
                <tr>
                    <td scope="row">@user.Id</td>
                    <td>@($"{user.Name} {user.LastName}")</td>
                    <td>@user.Email</td>
                    <td>@user.Phone</td>
                    <td>@user.Points</td>
                    <td>
                        <a class="btn btn-primary btn-sm" href="@($"{Routes.Reward.EditReward}/{user.Id.ToString()}")">
                            <i class="oi oi-pencil"></i> Cambiar estado de recompensa
                        </a>
                    </td>

                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="text-center mt-5">No se han encontrado usuarios para mostrar</p>
}


@code {
    private UserEmailFilter filter = new UserEmailFilter();
    private List<User> Users = new List<User>();

    [Inject] private IUserClientService UserClientService { get; set; } = null!;
    [Inject] private SweetAlertService Sweet { get; set; } = null!;
    [Inject] private ILogger<UserList> Logger { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    private async Task HandleSubmitForm()
    {
        await LoadUsers(filter.Email);
    }

    private async Task LoadUsers(string email)
    {
        var response = await UserClientService.GetUsersByEmail(email);

        if ( response.Data == null )
        {
            var toast = Sweet.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    TimerProgressBar = true,
                    Position = "top-end",
                    ShowConfirmButton = false,
                    Timer = 3000,
                });

            await toast.FireAsync(new SweetAlertOptions
                {
                    Icon = "danger",
                    Title = response.Message
                });
        }
        else
        {
            Users = response.Data.Users.Select(rewardClaim => UserMapper.MapToEntity(rewardClaim)).ToList();
        }
    }
}